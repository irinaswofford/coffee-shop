{"version":3,"sources":["actions/coffeShopActions.js","actions/action-types/coffeeShopTypes.js","components/InventoryReadout.js","actions/modalActions.js","actions/action-types/modal-actionTypes.js","components/ModalDrinks.js","components/MenuUi.js","App.js","serviceWorker.js","reducers/modalReducer.js","reducers/coffeeShopReducer.js","reducers/index.js","store/index.js","index.js"],"names":["updateIngredientList","newIngredientList","type","updateDrinkList","newDrinkList","ingredientList","length","map","drink","index","totalCostDrink","requiredIngredientUnits","forEach","requiredIngredient","objIngredient","find","ingr","ingredientName","trim","name","Number","costPerUnit","payloadAction","InventoryReadout","this","props","className","Container","Row","Col","sm","md","ingredient","key","toFixed","unitsInStock","React","Component","connect","state","coffeeShopReducer","drinkList","dispatch","openModal","settings","hasSettings","isOpenModal","header","body","buttonLeft","buttonRight","closeModal","callback","onCloseModal","ModalDrinks","bind","removeOnCloseModal","Modal","show","onEnter","onOpenModal","onExit","Header","Title","modal","Body","Footer","onClick","e","modalReducer","MenuUi","handleClick","drinkName","weCanMakeTheDrink","missingIngredients","errorMessage","requiredIngredientUnit","requiredIngredientName","requiredUnits","push","usedIngredient","usedIngredientName","usedUnits","objUsedIngredient","updateIngredient","setTimeout","style","color","split","item","i","setRestock","messageRestockSuccess","missingIngredient","missingIngredientName","event","icon","isYesRestock","newIngredient","App","Boolean","window","location","hostname","match","initState","addedItems","total","productId","modalId","footer","action","addedItem","items","id","existed_item","quantity","price","newTotal","ingredientListCopy","rootReducer","combineReducers","store","createStore","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cd2d87f.chunk.js","sourcesContent":["\r\n\r\n// open modal\r\nimport {\r\n    UPDATE_INGREDIENT_LIST,\r\n    UPDATE_DRINK_LIST,\r\n    SET_RESTOCK,\r\n    UPDATE_INGREDIENT\r\n} from '../actions/action-types/coffeeShopTypes.js';\r\n\r\n\r\n\r\nexport const updateIngredientList = (newIngredientList) => {\r\n\r\n    const payloadAction = {\r\n        type: UPDATE_INGREDIENT_LIST,\r\n        newIngredientList: newIngredientList || [],\r\n    }\r\n\r\n    return payloadAction\r\n}\r\n\r\nexport const updateIngredient = (newIngredient) => {\r\n\r\n    const payloadAction = {\r\n        type: UPDATE_INGREDIENT,\r\n        newIngredient: newIngredient || {},\r\n    }\r\n\r\n    return payloadAction\r\n}\r\n\r\nexport const updateDrinkList = (newDrinkList, ingredientList = []) => {\r\n \r\n    // init totalCostDrink\r\n    if (typeof ingredientList !== \"undefined\" && ingredientList.length > 0) {\r\n        // init totalCostDrink\r\n        newDrinkList = newDrinkList.map((drink, index) => {\r\n            let totalCostDrink = 0;\r\n            drink.requiredIngredientUnits.forEach((requiredIngredient, index) => {\r\n                let objIngredient = ingredientList.find((ingr) => (ingr.ingredientName || \"\").trim() === (requiredIngredient.name || \"\").trim()) || {};\r\n                totalCostDrink += Number(objIngredient.costPerUnit) || 0;\r\n            });\r\n            drink[\"totalCostDrink\"] = totalCostDrink;\r\n            return drink;\r\n        }); \r\n    }\r\n\r\n    const payloadAction = {\r\n        type: UPDATE_DRINK_LIST,\r\n        newDrinkList: newDrinkList || [],\r\n    }\r\n\r\n    return payloadAction\r\n}\r\n\r\nexport const setRestock = (isYesRestock) => {\r\n    const payloadAction = {\r\n        type: SET_RESTOCK,\r\n        isYesRestock: isYesRestock || false,\r\n    }\r\n\r\n    return payloadAction\r\n}\r\n","export const UPDATE_INGREDIENT_LIST = 'UPDATE_INGREDIENT_LIST';\r\nexport const UPDATE_DRINK_LIST = 'UPDATE_DRINK_LIST';\r\nexport const SET_RESTOCK = 'SET_RESTOCK';\r\nexport const UPDATE_INGREDIENT = 'UPDATE_INGREDIENT';\r\n","import React from 'react';\r\nimport ingredientList from '../ingredientList';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { updateIngredientList, updateDrinkList } from '../actions/coffeShopActions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass InventoryReadout extends React.Component {\r\n\r\n    componentDidMount() {\r\n        // call redux action updateIngredientList\r\n        this.props.updateIngredientList(ingredientList);\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"listStyle\">\r\n\r\n                <Container className=\"containerMenuUI\">\r\n                    <Row>\r\n                        <Col sm=\"12\" md=\"12\" className=\"containerMenuUI_th\">\r\n                            Ingredient Inventory\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_th2\">\r\n                            Ingredient\r\n                        </Col>\r\n                        <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_th2\">\r\n                            Cost Per Unit\r\n                        </Col>\r\n                        <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_th2\">\r\n                            Units In Stock\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {this.props.ingredientList.map((ingredient, index) =>\r\n                        (<div key={index}>\r\n                            <Row>\r\n                                <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_col2\">\r\n                                    <span>{ingredient.ingredientName}</span>\r\n                                </Col>\r\n                                <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_col2\">\r\n                                    <span>${(ingredient.costPerUnit || 0).toFixed(2)}</span>\r\n                                </Col>\r\n                                <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_col2\">\r\n                                    <span>{ingredient.unitsInStock}</span>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>))}\r\n\r\n                    <Row>\r\n                        <Col sm=\"12\" md=\"12\" className=\"containerMenuUI_tfoot_td\">\r\n                            &nbsp;\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>)\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        updateIngredientList: (newIngredientList) => {\r\n            let payloadAction = updateIngredientList(newIngredientList);\r\n            dispatch(payloadAction);\r\n        },\r\n        updateDrinkList: (newDrinkList) => {\r\n            let payloadAction = updateDrinkList(newDrinkList);\r\n            dispatch(payloadAction);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        ingredientList: state.coffeeShopReducer.ingredientList,\r\n        drinkList: state.coffeeShopReducer.drinkList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InventoryReadout)","// open modal\r\nimport { OPEN_MODAL, CLOSE_MODAL, REMOVE_ONCLOSEMODAL }\r\n    from '../actions/action-types/modal-actionTypes.js';\r\n\r\n\r\nexport const openModal = (settings) => {\r\n    let hasSettings = typeof settings !== \"undefined\" && settings !== null;\r\n\r\n    const payloadAction = {\r\n        type: OPEN_MODAL,\r\n        isOpenModal: true,\r\n        header: hasSettings ? (settings[\"header\"] || \"\") : \"\",\r\n        body: hasSettings ? (settings[\"body\"] || \"\") : \"\",\r\n        buttonLeft: hasSettings ? (settings[\"buttonLeft\"] || \"\") : \"\",\r\n        buttonRight: hasSettings ? (settings[\"buttonRight\"] || \"\") : \"\"\r\n    }\r\n\r\n    return payloadAction\r\n}\r\n\r\nexport const closeModal = (callback) => {\r\n\r\n    const payloadAction = {\r\n        type: CLOSE_MODAL,\r\n        isOpenModal: false,\r\n        onCloseModal: typeof callback === \"function\" ? callback : () => { }\r\n    }\r\n\r\n    return payloadAction;\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n// add cart action\r\nexport const removeOnCloseModal = () => {\r\n    return {\r\n        type: REMOVE_ONCLOSEMODAL\r\n    }\r\n}\r\n","export const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const OPEN_MODAL = 'OPEN_MODAL';\r\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\r\nexport const REMOVE_ONCLOSEMODAL = 'REMOVE_ONCLOSEMODAL';\r\n","\r\nimport React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { connect } from 'react-redux';\r\nimport { openModal, closeModal, removeOnCloseModal } from '../actions/modalActions';\r\n\r\n\r\nclass ModalDrinks extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.onCloseModal = this.onCloseModal.bind(this);\r\n    }\r\n\r\n    onCloseModal() {\r\n        if (typeof this.props.onCloseModal === \"function\") {\r\n            this.props.onCloseModal(); // call it...\r\n            this.props.removeOnCloseModal(); // ...than kill it (self-removing)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal show={this.props.isOpenModal}\r\n                    onEnter={this.props.onOpenModal}\r\n                    onExit={typeof this.props.onCloseModal === \"function\" ? this.onCloseModal() : () => { }}>\r\n\r\n                    <Modal.Header>\r\n                        <Modal.Title>\r\n                            {this.props.modal.header}\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        {this.props.modal.body}\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n\r\n                        {this.props.modal.buttonLeft !== null ? this.props.modal.buttonLeft : <button onClick={e => this.props.closeModal()}>Cancel</button>}\r\n                        {this.props.modal.buttonRight !== null ? this.props.modal.buttonRight : <button onClick={e => this.props.closeModal()}>Save</button>}\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n} // end class\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        // modal controls\r\n        openModal: () => { dispatch(openModal()) },\r\n        closeModal: () => { dispatch(closeModal()) },\r\n        removeOnCloseModal: () => { dispatch(removeOnCloseModal()) }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isOpenModal: state.modalReducer.modal.isOpenModal,\r\n        modal: state.modalReducer.modal,\r\n        // modal events\r\n        onOpenModal: state.modalReducer.modal.onOpenModal,\r\n        onCloseModal: state.modalReducer.modal.onCloseModal\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalDrinks)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ingredientList from '../ingredientList';\r\nimport drinkList from '../drinkList';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport MaterialIcon from 'material-icons-react';\r\nimport { connect } from 'react-redux';\r\nimport { updateIngredientList, updateDrinkList, updateIngredient, setRestock } from '../actions/coffeShopActions';\r\nimport ModalDrinks from './ModalDrinks';\r\nimport { openModal, closeModal } from '../actions/modalActions';\r\n\r\n\r\nclass MenuUi extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    };\r\n\r\n    componentDidMount() {\r\n        //console.log(ingredientList);\r\n        // call redux action updateDrinkList\r\n        this.props.updateDrinkList(drinkList, ingredientList || this.props.ingredientList);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    handleClick(drink) {\r\n        // un-pack drink\r\n        //let drinkId = (String(drink[\"drinkId\"]) || \"\").trim(); // safe trim\r\n        let drinkName = (drink[\"drinkName\"] || \"\").trim();\r\n        let requiredIngredientUnits = drink[\"requiredIngredientUnits\"] || [];\r\n\r\n        // vals\r\n        var weCanMakeTheDrink = true;\r\n        let missingIngredients = [];\r\n        let errorMessage = `Sorry, cannot buy ${drinkName}!\\nWould you like us to re-stock ingredients:`;\r\n\r\n        // process drink, based on needed/actual ingredients\r\n        requiredIngredientUnits.forEach((requiredIngredientUnit, index) => {\r\n\r\n            // needed ingredients\r\n            let requiredIngredientName = (requiredIngredientUnit[\"name\"] || \"\").trim();\r\n            let requiredUnits = Number(requiredIngredientUnit[\"units\"]) || 0;\r\n\r\n            // actual ingredients\r\n            let objIngredient = this.props.ingredientList.find((ingredient) => (ingredient.ingredientName || \"\").trim() === requiredIngredientName) || {};\r\n            let actualUnitsInStock = Number(objIngredient.unitsInStock) || 0;\r\n\r\n            // validation- do we have enough ingredient to make the drink?\r\n            let hasEnoughUnits = actualUnitsInStock >= requiredUnits;\r\n\r\n            // if cannot make drink due to lack of ingredients\r\n            if (!hasEnoughUnits) {\r\n                weCanMakeTheDrink = false;\r\n                missingIngredients.push(objIngredient);\r\n                errorMessage += `\\n${objIngredient.ingredientName}`;\r\n            }\r\n        });\r\n\r\n        // YES, we can make the drink!\r\n        if (weCanMakeTheDrink) {\r\n\r\n            // update unitsInStock for ingredients (subtract used units from current used)\r\n            let totalCostDrink = 0;\r\n            requiredIngredientUnits.forEach((usedIngredient, index) => {\r\n                // used ingredients\r\n                let usedIngredientName = (usedIngredient[\"name\"] || \"\").trim();\r\n                let usedUnits = Number(usedIngredient[\"units\"]) || 0;\r\n\r\n                // subtract used units from current units\r\n                let objUsedIngredient = this.props.ingredientList.find((ingredient) => (ingredient.ingredientName || \"\").trim() === usedIngredientName) || {};\r\n                objUsedIngredient.unitsInStock = (Number(objUsedIngredient.unitsInStock) || 0) - usedUnits;\r\n\r\n                // totalCostDrink\r\n                totalCostDrink += objUsedIngredient.costPerUnit || 0;\r\n\r\n                // call redux action updateIngredient\r\n                this.props.updateIngredient(objUsedIngredient);\r\n            });\r\n\r\n            // success modal\r\n            setTimeout(() => {\r\n                this.props.openModal({\r\n                    header: <span style={{ color: \"green\" }}>Success!</span>,\r\n                    body: <span>You bought 1 {drinkName} for ${(totalCostDrink || 0).toFixed(2)}</span>,\r\n                    buttonLeft: <button onClick={e => this.props.closeModal()}>Dismiss</button>\r\n                });\r\n            }, 100)\r\n        }\r\n\r\n        // NO we cannot make the drink!\r\n        else if (!weCanMakeTheDrink) {\r\n\r\n            // creates line breaks\r\n            errorMessage = errorMessage.split('\\n').map((item, i) => {\r\n                return <p key={i}>{item}</p>;\r\n            });\r\n\r\n            // confirm modal re-stock ingredients\r\n            this.props.openModal({\r\n                header: <span style={{ color: \"darkred\" }}>Re-Stock Ingredients?</span>,\r\n                body: errorMessage,\r\n                buttonLeft: <button onClick={e => {\r\n                    this.props.setRestock(false); // call redux action setRestock\r\n                    this.props.closeModal(); // call redux action closeModal\r\n                }}\r\n                >Cancel</button>,\r\n                buttonRight: <button onClick={e => {\r\n\r\n                    // vals\r\n                    let messageRestockSuccess = \"\";\r\n\r\n                    // process missing ingredients\r\n                    missingIngredients.forEach((missingIngredient, index) => {\r\n                        // un-pack\r\n                        let missingIngredientName = (missingIngredient.ingredientName || \"\").trim();\r\n\r\n                        // refresh unitsInStock\r\n                        missingIngredient.unitsInStock = 40;\r\n\r\n                        // call redux action updateIngredient\r\n                        this.props.updateIngredient(missingIngredient);\r\n\r\n                        messageRestockSuccess += `re-stocked ${missingIngredient.unitsInStock} units of ${missingIngredientName}\\n`;\r\n                    });\r\n\r\n\r\n\r\n\r\n                    this.props.setRestock(true); // call redux action setRestock\r\n                    this.props.closeModal(); // call redux action closeModal\r\n\r\n                    // creates line breaks\r\n                    messageRestockSuccess = messageRestockSuccess.split('\\n').map((item, i) => {\r\n                        return <p key={i}>{item}</p>;\r\n                    });\r\n\r\n                    // show restock success alert\r\n                    setTimeout(() => {\r\n                        this.props.openModal({\r\n                            header: <span style={{ color: \"green\" }}>Success!</span>,\r\n                            body: <span>{messageRestockSuccess}</span>,\r\n                            buttonLeft: <button onClick={e => this.props.closeModal()}>Dismiss</button>\r\n                        });\r\n                    }, 400)\r\n\r\n\r\n                }}>Yes Restock</button>\r\n            });\r\n\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n\r\n                <Container className=\"containerMenuUI\">\r\n                    <Row>\r\n\r\n                        <Col sm=\"12\" md=\"12\" className=\"containerMenuUI_th\">\r\n                            Coffee Shop Drink Menu\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col sm=\"1\" md=\"1\" className=\"containerMenuUI_th1\">\r\n                            &nbsp;\r\n                        </Col>\r\n                        <Col sm=\"7\" md=\"7\" className=\"containerMenuUI_th1\">\r\n                            Drink\r\n                        </Col>\r\n                        <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_th1\">\r\n                            Price\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {this.props.drinkList.map((drink, index) =>\r\n                        (<div key={index}>\r\n                            <Row>\r\n                                <Col sm=\"1\" md=\"1\" className=\"containerMenuUI_col\">\r\n                                    <span className=\"btn-floating halfway-fab waves-effect waves-light\" onClick={(event) => { this.handleClick(drink) }}>\r\n                                        <MaterialIcon icon=\"add\" />\r\n                                    </span>\r\n                                </Col>\r\n\r\n                                <Col sm=\"7\" md=\"7\" className=\"containerMenuUI_col\">\r\n                                    <div className=\"drinkName\" onClick={(event) => { this.handleClick(drink) }}>\r\n                                        {drink[\"drinkName\"] || \"\"}\r\n                                    </div>\r\n                                </Col>\r\n\r\n                                <Col sm=\"4\" md=\"4\" className=\"containerMenuUI_col\">\r\n                                    ${(drink[\"totalCostDrink\"] || 0).toFixed(2)}\r\n                                </Col>\r\n                            </Row>\r\n                        </div>))}\r\n                    <Row>\r\n                        <Col sm=\"12\" md=\"12\" className=\"containerMenuUI_tfoot_td\">\r\n                            &nbsp;\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n\r\n                <ModalDrinks />\r\n            </div>)\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        updateIngredientList: (newIngredientList) => {\r\n            let payloadAction = updateIngredientList(newIngredientList);\r\n            dispatch(payloadAction);\r\n        },\r\n        updateDrinkList: (newDrinkList, ingredientList) => {\r\n            let payloadAction = updateDrinkList(newDrinkList, ingredientList);\r\n            dispatch(payloadAction);\r\n        },\r\n        updateIngredient: (ingredient) => {\r\n            let payloadAction = updateIngredient(ingredient);\r\n            dispatch(payloadAction);\r\n        },\r\n        setRestock: (isYesRestock) => {\r\n            let payloadAction = setRestock(isYesRestock);\r\n            dispatch(payloadAction);\r\n        },\r\n\r\n        // modal controls\r\n        openModal: (settings) => { dispatch(openModal(settings)) },\r\n        closeModal: (callback) => { dispatch(closeModal(callback)) }\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ingredientList: state.coffeeShopReducer.ingredientList,\r\n        drinkList: state.coffeeShopReducer.drinkList,\r\n        isYesRestock: state.coffeeShopReducer.isYesRestock\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuUi)","import React from 'react';\nimport './App.css';\nimport InventoryReadout from './components/InventoryReadout';\nimport MenuUi from './components/MenuUi'; \n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MenuUi/>\n      <InventoryReadout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport { OPEN_MODAL, CLOSE_MODAL, ADD_TO_CART, REMOVE_ONCLOSEMODAL } from '../actions/action-types/modal-actionTypes.js';\r\nimport drinkList from '../drinkList';\r\n\r\nconst initState = {\r\n    drinkList: drinkList,\r\n    addedItems: [],\r\n    total: 0,\r\n    modal: {\r\n        isOpenModal: false,\r\n        productId: \"\",\r\n        modalId: \"modal1\",\r\n        header: \"\",\r\n        body: \"\",\r\n        footer: \"\",\r\n        // modal events\r\n        onOpenModal: null,\r\n        onCloseModal: null,\r\n        // buttons\r\n        buttonLeft: null,\r\n        buttonRight: null,\r\n    }\r\n}\r\n\r\n\r\nconst modalReducer = (state = initState, action) => {\r\n\r\n    //INSIDE HOME COMPONENT\r\n    if (action.type === OPEN_MODAL) {\r\n\r\n        return {\r\n            ...state,\r\n            modal: {\r\n                ...state.modal,\r\n                isOpenModal: action.isOpenModal,\r\n                modalId: action.modalId,\r\n                header: action.header,\r\n                body: action.body,\r\n                buttonLeft: action.buttonLeft,\r\n                buttonRight: action.buttonRight\r\n            }\r\n        }\r\n    }\r\n    else if (action.type === CLOSE_MODAL) {\r\n        return {\r\n            ...state,\r\n            modal: {\r\n                ...state.modal,\r\n                isOpenModal: action.isOpenModal,\r\n                onCloseModal: action.onCloseModal\r\n            }\r\n        }\r\n    }\r\n    else if (action.type === REMOVE_ONCLOSEMODAL) {\r\n        return {\r\n            ...state,\r\n            modal: {\r\n                ...state.modal,\r\n                onCloseModal: null\r\n            }\r\n        }\r\n    }\r\n    else if (action.type === ADD_TO_CART) {\r\n        //debugger\r\n        //in array called item you find item ..\r\n        let addedItem = state.items.find(item => item.id === action.id)\r\n        //check if the action id exists in the addedItems\r\n        let existed_item = state.addedItems.find(item => action.id === item.id)\r\n        if (existed_item) {\r\n            //means+= if was 5 you added 1 more\r\n            addedItem.quantity += 1\r\n            return {\r\n                ...state,\r\n                total: state.total + addedItem.price\r\n            }\r\n        }\r\n        else {\r\n            addedItem.quantity = 1;\r\n            //calculating the total\r\n            let newTotal = state.total + addedItem.price\r\n\r\n            return {\r\n                ...state,\r\n                addedItems: [...state.addedItems, addedItem],\r\n                total: newTotal\r\n            }\r\n\r\n        }\r\n    }\r\n    else {\r\n        return state;\r\n    }\r\n    /*     else if (action.type === REMOVE_ITEM) {\r\n            let itemToRemove = state.addedItems.find(item => action.id === item.id)\r\n            let new_items = state.addedItems.filter(item => action.id !== item.id)\r\n    \r\n            //calculating the total\r\n            let newTotal = state.total - (itemToRemove.price * itemToRemove.quantity)\r\n            console.log(itemToRemove)\r\n            return {\r\n                ...state,\r\n                addedItems: new_items,\r\n                total: newTotal\r\n            }\r\n        }  */\r\n\r\n}\r\n\r\nexport default modalReducer","\r\nimport {\r\n    UPDATE_INGREDIENT_LIST,\r\n    UPDATE_DRINK_LIST,\r\n    SET_RESTOCK,\r\n    UPDATE_INGREDIENT\r\n} from '../actions/action-types/coffeeShopTypes.js';\r\n\r\n// initialState\r\nconst initState = {\r\n    ingredientList: [],\r\n    drinkList: [],\r\n    isYesRestock: false\r\n}\r\n\r\nconst coffeeShopReducer = (state = initState, action) => {\r\n\r\n    // \r\n    if (action.type === UPDATE_INGREDIENT_LIST) {\r\n        return {\r\n            ...state,\r\n            ingredientList: action.newIngredientList\r\n        }\r\n    }\r\n    else if (action.type === UPDATE_DRINK_LIST) {\r\n        return {\r\n            ...state,\r\n            drinkList: action.newDrinkList\r\n        }\r\n    }\r\n    else if (action.type === UPDATE_INGREDIENT) {\r\n\r\n        // vals\r\n        let ingredientName = (action.newIngredient.ingredientName || \"\").trim();\r\n\r\n        // copies array\r\n        let ingredientListCopy = [...state.ingredientList];\r\n\r\n        // update 1 ingredient\r\n        ingredientListCopy.forEach((item, index) => {\r\n            if (item.ingredientName === ingredientName) {\r\n                ingredientListCopy[index] = action.newIngredient;\r\n            }   \r\n        });\r\n\r\n        return {\r\n            ...state,\r\n            ingredientList: ingredientListCopy\r\n        }\r\n    }\r\n    else if (action.type === SET_RESTOCK) {\r\n        return {\r\n            ...state,\r\n            isYesRestock: action.isYesRestock\r\n        }\r\n    }\r\n    else {\r\n        return state;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default coffeeShopReducer","  \r\nimport { combineReducers } from 'redux';\r\nimport modalReducer from './modalReducer';\r\nimport coffeeShopReducer from './coffeeShopReducer';\r\n\r\n  const rootReducer = combineReducers({\r\n    coffeeShopReducer,\r\n    modalReducer\r\n  })\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers/index';\r\n\r\n\r\nconst store = createStore(\r\n    rootReducer\r\n);\r\nexport default store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from \"../src/store/index\";\n\n\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}